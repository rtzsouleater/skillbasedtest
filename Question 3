//server
import socket

def bar_to_atmosphere(pressure_bar):
    # 1 bar is approximately equal to 0.98692 atmosphere
    return pressure_bar * 0.98692

def main():
    # Create a socket
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Bind the socket to a specific address and port
    server_address = ('192.168.11.128', 8443)
    server_socket.bind(server_address)

    # Listen for incoming connections (maximum 1 connection at a time)
    server_socket.listen(1)

    print("Server listening on {}:{}".format(*server_address))

    while True:
        # Wait for a connection
        client_socket, client_address = server_socket.accept()

        try:
            # Receive data from the client (pressure in bar)
            data = client_socket.recv(1024)
            pressure_bar = float(data)

            # Convert pressure to atmosphere-standard
            atmosphere_standard = bar_to_atmosphere(pressure_bar)

            # Send the converted value back to the client
            client_socket.sendall(str(atmosphere_standard).encode())

            print("Pressure in bar: {} | Pressure in atmosphere-standard: {}".format(pressure_bar, atmosphere_standard))

        finally:
            # Close the connection
            client_socket.close()

if __name__ == "__main__":
    main()
//client
import socket

def main():
    # Create a socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    # Connect to the server
    server_address = ('192.168.11.128', 8443)
    client_socket.connect(server_address)

    # Get user input for pressure in bar
    pressure_bar = float(input("Enter pressure in bar: "))

    # Send the pressure value to the server
    client_socket.sendall(str(pressure_bar).encode())

    # Receive the converted value from the server
    data = client_socket.recv(1024)
    atmosphere_standard = float(data)

    # Display the received atmosphere-standard value
    print("Pressure in atmosphere-standard: {}".format(atmosphere_standard))

    # Close the socket
    client_socket.close()

if __name__ == "__main__":
    main()
